#! /usr/bin/env python3
# record all packets during a ride for playback
#
# Run using:
# record_ride &

import os
import pickle
import signal
import sys
import time
import zerobt

# handle ctrl-c & kill
def signal_handler(signal, frame):
    global interrupted
    interrupted=True
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# open output file
ctr=0
while True:
    ctr+=1
    fn='ride-%d.dat' % ctr
    if not os.path.exists(fn):
        # file does not exist
        break
    if not os.path.getsize(fn):
        # file has no data
        break
f=open(fn, 'wb')
pickler=pickle.Pickler(f, pickle.HIGHEST_PROTOCOL)

socket=None
try:
    # connect to bike
    while not interrupted:
        try:
            socket=zerobt.connect_to_bike()
        except:
            print('trying to connect to bike', flush=True)
            time.sleep(1)
    print('connected to bike', flush=True)

    # because we have to run in the background
    sys.stdout=open('ride_output-%d.txt' % ctr, 'w')
    sys.stderr=open('ride_error-%d.txt' % ctr, 'w')

    ctr=0
    cmds=sorted(zerobt.cmd_packets)
    # this is static and only needs to be run once
    cmds.remove('Gbki')
    packet=zerobt.read_packet(socket, 'Gbki')
    pickler.dump(packet)
    interrupted=False
    print('running', flush=True)
    while not interrupted:
        for cmd in cmds:
            packet=zerobt.read_packet(socket, cmd)
            packet['set']=ctr
            pickler.dump(packet)
        ctr+=1
        if ctr > 15:
            ctr=0
        time.sleep(1)
except Exception as e:
    print(e)
finally:
    f.close()
    if socket:
        socket.close()
    print('done')
