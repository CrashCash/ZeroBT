#! /usr/bin/env python3
#
# Record all packets during a ride for playback, and GPS-tag them
#
# Install GPSd and the Python client library
# apt install gpsd
# pip3 install gpsd-py3
#
# Set up GPSd to work with your GPS unit or your phone.
#
# One possible approach:
# Set up your phone as a Bluetooth GPS with "GPSd Forwarder" from the Fdroid
# catalog (f-droid.org)
#
# Set up the Pi as hotspot. Follow the instructions for "Raspberry Pi - Auto
# WiFi Hotspot Switch - Direct Connection" which auto-switches between
# connecting to your home WiFi when available, and being a hotspot on the
# road.
# https://www.raspberryconnect.com/projects/65-raspberrypi-hotspot-accesspoints/158-raspberry-pi-auto-wifi-hotspot-switch-direct-connection
#
# Decide on a port to use (e.g. 6666)
# Edit GPSD_OPTIONS in /etc/default/gpsd to use that port: GPSD_OPTIONS="udp://*:6666"
# restart the service with "service gpsd restart" to use the new settings.
# Start "GPSd Forwarder" app on the phone and enter the Pi's address and port
# (You can run "cgps" to test things. It should have a scrolling stream of data.)
#
# Start script: "record_ride_gps &"

import gpsd
import math
import os
import pickle
import signal
import sys
import time
import zerobt

# calculate distance between 2 points on the earth using Haversine
# (https://en.wikipedia.org/wiki/Haversine_formula)
# output is in whatever units the Earth's radius is given
#radius=6371 # km
#radius=3958.8 # miles
radius=6371008.8 # meters
def distance(lat1, lon1, lat2, lon2):
    dlat=math.radians(lat2-lat1)
    dlon=math.radians(lon2-lon1)
    a=(math.sin(dlat/2)*math.sin(dlat/2)+
       math.cos(math.radians(lat1))*
       math.cos(math.radians(lat2))*
       math.sin(dlon/2)*math.sin(dlon/2))
    c=2*math.atan2(math.sqrt(a), math.sqrt(1-a))
    d=radius*c
    return d

# handle ctrl-c & kill
def signal_handler(signal, frame):
    global interrupted
    interrupted=True
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# open output file
ctr=0
while True:
    ctr+=1
    fn='ride_gps-%d.dat' % ctr
    if not os.path.exists(fn):
        # file does not exist
        break
    if not os.path.getsize(fn):
        # file has no data
        break
f=open(fn, 'wb')
pickler=pickle.Pickler(f, pickle.HIGHEST_PROTOCOL)

cmds=sorted(zerobt.cmd_packets)
cmds.remove('Gbki')

# because we have to run in the background
sys.stdout=open('ride_gps_output-%d.txt' % ctr, 'w')
sys.stderr=open('ride_gps_error-%d.txt' % ctr, 'w')

socket=None
interrupted=False
while not interrupted:
    try:
        # connect to GPSd and wait for lock
        while not interrupted:
            try:
                gpsd.connect()
                fix=gpsd.get_current()
                if fix.mode >= 2:
                    break
            except:
                print('trying to connect to GPS', flush=True)
                time.sleep(1)
        print('GPS acquired', flush=True)

        # connect to bike
        while not interrupted:
            try:
                socket=zerobt.connect_to_bike()
                break
            except:
                print('trying to connect to bike', flush=True)
                time.sleep(1)
        print('connected to bike', flush=True)

        ctr=0
        old_lat=0
        old_lon=0
        print('running', flush=True)
        while not interrupted:
            fix=gpsd.get_current()
            if fix.mode < 2:
                continue
            # avoid too many points
            d=distance(old_lat, old_lon, fix.lat, fix.lon)
            if d < 50:
                continue
            old_lat=fix.lat
            old_lon=fix.lon
            for cmd in cmds:
                packet=zerobt.read_packet(socket, cmd)
                packet['gps_lat']=fix.lat
                packet['gps_lon']=fix.lon
                packet['set']=ctr
                pickler.dump(packet)
            ctr+=1
            if ctr > 15:
                ctr=0
    except Exception as e:
        print(e)
    finally:
        f.close()
        if socket:
            socket.close()
print('done')
