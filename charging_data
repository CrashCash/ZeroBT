#! /usr/bin/env python3
# print charging info suitable for Excel

import sys
import time
import zerobt

def wait():
    # sleep until next minute
    #time.sleep(60-time.localtime().tm_sec)
    # sleep until next even 5 minutes
    time.sleep((4-time.localtime().tm_min%5)*60+60-time.localtime().tm_sec)

# convert °C to °F
def f(c):
    return c*1.8+32

# wait for bike to become available
zerobt.get_services(retries=100, callback=lambda: print('retrying...'))

print('connecting...')
socket=zerobt.connect_to_bike()
print('connected to bike')

try:
    # wait until we're charging
    while True:
        print('reading MbbR packet')
        mbbr=zerobt.read_packet(socket, 'MbbR')
        if mbbr['charging']:
            break
        time.sleep(30)
    print('now charging')

    wait()
    output=open('charging_data-'+time.strftime('%Y-%m-%d+%H-%M')+'.csv', 'w')
    # header line
    print('"Time"', '"Time\nUntil\nCharged"', '"Minutes\nUntil\nCharged"', '"Finish\nTime"',
          '"Battery\nCurrent\n(amps)"', '"Cell\nVoltage\nMax\n(V)"', '"Cell\nVoltage\nMin\n(V)"',
          '"Pack\nCapacity\n(ah)"', '"Pack\nCapacity\nRemain\n(ah)"', '"Pack 1\nTemp\n(°C)"', '"Pack 2\nTemp\n(°C)"',
          '"Pack\nTemp\nMax (°C)"', '"Pack\nTemp\nMin (°C)"', '"Pack 1\nTemp\n(°F)"', '"Pack 2\nTemp\n(°F)"',
          '"Pack\nTemp\nMax (°F)"', '"Pack\nTemp\nMin (°F)"', '"Pack\nVoltage\n(V)"', '"Charge\n(%)"',
          '"Temp\nWarning"', '"Battery\nCharge\nCritical\nLow"', '"Battery\nCharge\nLow"',
          '"Battery\nOut Of\nBalance"', '"Battery\nTemp\nCold"', '"Battery\nTemp\nCritical\nHigh"',
          '"Battery\nTemp\nHigh"',
          sep=',', flush=True, file=output)

    ctr=5
    while ctr:
        now=time.strftime('%H:%M')

        mbbr=zerobt.read_packet(socket, 'MbbR')
        if mbbr['charging'] or mbbr['battery_current_amps']:
            ctr=5
        else:
            ctr-=1

        pwpk=zerobt.read_packet(socket, 'PwPk')
        dst3=zerobt.read_packet(socket, 'DSt3')
        btst=zerobt.read_packet(socket, 'BtSt')

        t=dst3['minutes_until_charged']
        h, m=divmod(t, 60)

        # time it should be finished charging
        target=time.strftime('%H:%M', time.localtime(time.time()+t*60))
        print(now, pwpk['charge_pct'], target, dst3['minutes_until_charged'])

        print(now, '%d:%02d' % (h, m), t, target, -pwpk['battery_current_amps'], pwpk['cell_voltage_max_mv']/1000,
              pwpk['cell_voltage_min_mv']/1000, pwpk['pack_capacity_ah'], pwpk['pack_capacity_remain_ah'],
              pwpk['pack_temp_c'][0], pwpk['pack_temp_c'][1], pwpk['pack_temp_max_c'], pwpk['pack_temp_min_c'],
              f(pwpk['pack_temp_c'][0]), f(pwpk['pack_temp_c'][1]), f(pwpk['pack_temp_max_c']),
              f(pwpk['pack_temp_min_c']), pwpk['pack_voltage_mv']/1000, pwpk['charge_pct'], mbbr['temp_warning'],
              btst['battery_charge_critical_low'], btst['battery_charge_low'], btst['battery_out_of_balance'],
              btst['battery_temp_cold'], btst['battery_temp_critical_high'], btst['battery_temp_high'],
              sep=',', flush=True, file=output)

        if mbbr['temp_warning']:
            print('Temperature warning')
        if btst['battery_charge_critical_low']:
            print('Battery charge critical low')
        if btst['battery_charge_low']:
            print('Battery charge low')
        if btst['battery_out_of_balance']:
            print('Battery out of balance')
        if btst['battery_temp_cold']:
            print('Battery temperature cold')
        if btst['battery_temp_critical_high']:
            print('Battery temperature critical high')
        if btst['battery_temp_high']:
            print('Battery temperature high')

        wait()
finally:
    socket.close()
